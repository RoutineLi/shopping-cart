// Code generated by goctl. DO NOT EDIT.
// Source: product.proto

package productclient

import (
	"context"

	"graduate_design/product/rpc/types/product"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddRequest         = product.AddRequest
	AddResponse        = product.AddResponse
	CategoriesRequest  = product.CategoriesRequest
	CategoriesResponse = product.CategoriesResponse
	DelRequest         = product.DelRequest
	DelResponse        = product.DelResponse
	DetailRequest      = product.DetailRequest
	DetailResponse     = product.DetailResponse
	IdsRequest         = product.IdsRequest
	IdsResponse        = product.IdsResponse
	Item               = product.Item
	ModRequest         = product.ModRequest
	ModResponse        = product.ModResponse

	Product interface {
		Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
		Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelResponse, error)
		Mod(ctx context.Context, in *ModRequest, opts ...grpc.CallOption) (*ModResponse, error)
		Detail(ctx context.Context, in *DetailRequest, opts ...grpc.CallOption) (*DetailResponse, error)
		Categories(ctx context.Context, in *CategoriesRequest, opts ...grpc.CallOption) (*CategoriesResponse, error)
		Ids(ctx context.Context, in *IdsRequest, opts ...grpc.CallOption) (*IdsResponse, error)
	}

	defaultProduct struct {
		cli zrpc.Client
	}
)

func NewProduct(cli zrpc.Client) Product {
	return &defaultProduct{
		cli: cli,
	}
}

func (m *defaultProduct) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.Add(ctx, in, opts...)
}

func (m *defaultProduct) Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelResponse, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.Del(ctx, in, opts...)
}

func (m *defaultProduct) Mod(ctx context.Context, in *ModRequest, opts ...grpc.CallOption) (*ModResponse, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.Mod(ctx, in, opts...)
}

func (m *defaultProduct) Detail(ctx context.Context, in *DetailRequest, opts ...grpc.CallOption) (*DetailResponse, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.Detail(ctx, in, opts...)
}

func (m *defaultProduct) Categories(ctx context.Context, in *CategoriesRequest, opts ...grpc.CallOption) (*CategoriesResponse, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.Categories(ctx, in, opts...)
}

func (m *defaultProduct) Ids(ctx context.Context, in *IdsRequest, opts ...grpc.CallOption) (*IdsResponse, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.Ids(ctx, in, opts...)
}

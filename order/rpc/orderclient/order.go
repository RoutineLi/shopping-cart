// Code generated by goctl. DO NOT EDIT.
// Source: order.proto

package orderclient

import (
	"context"

	"graduate_design/order/rpc/types/order"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddOrderRequest      = order.AddOrderRequest
	AddOrderResponse     = order.AddOrderResponse
	CreateOrderRequest   = order.CreateOrderRequest
	CreateOrderResponse  = order.CreateOrderResponse
	GetOrderByIdRequest  = order.GetOrderByIdRequest
	GetOrderByIdResponse = order.GetOrderByIdResponse
	OrderItem            = order.OrderItem
	Orders               = order.Orders
	OrdersRequest        = order.OrdersRequest
	OrdersResponse       = order.OrdersResponse

	Order interface {
		Orders(ctx context.Context, in *OrdersRequest, opts ...grpc.CallOption) (*OrdersResponse, error)
		CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
		CreateOrderCheck(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
		RollbackOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
		CreateOrderDTM(ctx context.Context, in *AddOrderRequest, opts ...grpc.CallOption) (*AddOrderResponse, error)
		CreateOrderDTMRevert(ctx context.Context, in *AddOrderRequest, opts ...grpc.CallOption) (*AddOrderResponse, error)
		GetOrderById(ctx context.Context, in *GetOrderByIdRequest, opts ...grpc.CallOption) (*GetOrderByIdResponse, error)
	}

	defaultOrder struct {
		cli zrpc.Client
	}
)

func NewOrder(cli zrpc.Client) Order {
	return &defaultOrder{
		cli: cli,
	}
}

func (m *defaultOrder) Orders(ctx context.Context, in *OrdersRequest, opts ...grpc.CallOption) (*OrdersResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.Orders(ctx, in, opts...)
}

func (m *defaultOrder) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.CreateOrder(ctx, in, opts...)
}

func (m *defaultOrder) CreateOrderCheck(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.CreateOrderCheck(ctx, in, opts...)
}

func (m *defaultOrder) RollbackOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.RollbackOrder(ctx, in, opts...)
}

func (m *defaultOrder) CreateOrderDTM(ctx context.Context, in *AddOrderRequest, opts ...grpc.CallOption) (*AddOrderResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.CreateOrderDTM(ctx, in, opts...)
}

func (m *defaultOrder) CreateOrderDTMRevert(ctx context.Context, in *AddOrderRequest, opts ...grpc.CallOption) (*AddOrderResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.CreateOrderDTMRevert(ctx, in, opts...)
}

func (m *defaultOrder) GetOrderById(ctx context.Context, in *GetOrderByIdRequest, opts ...grpc.CallOption) (*GetOrderByIdResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.GetOrderById(ctx, in, opts...)
}

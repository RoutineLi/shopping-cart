// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: im.proto

package websocket

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IM_SendMessage_FullMethodName = "/im.IM/SendMessage"
	IM_RecvMessage_FullMethodName = "/im.IM/RecvMessage"
)

// IMClient is the client API for IM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IMClient interface {
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	RecvMessage(ctx context.Context, in *RecvMessageRequest, opts ...grpc.CallOption) (*RecvMessageResponse, error)
}

type iMClient struct {
	cc grpc.ClientConnInterface
}

func NewIMClient(cc grpc.ClientConnInterface) IMClient {
	return &iMClient{cc}
}

func (c *iMClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, IM_SendMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iMClient) RecvMessage(ctx context.Context, in *RecvMessageRequest, opts ...grpc.CallOption) (*RecvMessageResponse, error) {
	out := new(RecvMessageResponse)
	err := c.cc.Invoke(ctx, IM_RecvMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IMServer is the server API for IM service.
// All implementations must embed UnimplementedIMServer
// for forward compatibility
type IMServer interface {
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	RecvMessage(context.Context, *RecvMessageRequest) (*RecvMessageResponse, error)
	mustEmbedUnimplementedIMServer()
}

// UnimplementedIMServer must be embedded to have forward compatible implementations.
type UnimplementedIMServer struct {
}

func (UnimplementedIMServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedIMServer) RecvMessage(context.Context, *RecvMessageRequest) (*RecvMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecvMessage not implemented")
}
func (UnimplementedIMServer) mustEmbedUnimplementedIMServer() {}

// UnsafeIMServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IMServer will
// result in compilation errors.
type UnsafeIMServer interface {
	mustEmbedUnimplementedIMServer()
}

func RegisterIMServer(s grpc.ServiceRegistrar, srv IMServer) {
	s.RegisterService(&IM_ServiceDesc, srv)
}

func _IM_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IM_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IM_RecvMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecvMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMServer).RecvMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IM_RecvMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMServer).RecvMessage(ctx, req.(*RecvMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IM_ServiceDesc is the grpc.ServiceDesc for IM service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IM_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "im.IM",
	HandlerType: (*IMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _IM_SendMessage_Handler,
		},
		{
			MethodName: "RecvMessage",
			Handler:    _IM_RecvMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "im.proto",
}

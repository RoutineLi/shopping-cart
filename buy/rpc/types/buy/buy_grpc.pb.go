// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: rpc/buy.proto

package buy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Buy_SetProducts_FullMethodName = "/buy.Buy/SetProducts"
	Buy_SetOrder_FullMethodName    = "/buy.Buy/SetOrder"
)

// BuyClient is the client API for Buy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuyClient interface {
	SetProducts(ctx context.Context, in *BuyProductsRequest, opts ...grpc.CallOption) (*BuyProductsResponse, error)
	SetOrder(ctx context.Context, in *SetOrderRequest, opts ...grpc.CallOption) (*SetOrderResponse, error)
}

type buyClient struct {
	cc grpc.ClientConnInterface
}

func NewBuyClient(cc grpc.ClientConnInterface) BuyClient {
	return &buyClient{cc}
}

func (c *buyClient) SetProducts(ctx context.Context, in *BuyProductsRequest, opts ...grpc.CallOption) (*BuyProductsResponse, error) {
	out := new(BuyProductsResponse)
	err := c.cc.Invoke(ctx, Buy_SetProducts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buyClient) SetOrder(ctx context.Context, in *SetOrderRequest, opts ...grpc.CallOption) (*SetOrderResponse, error) {
	out := new(SetOrderResponse)
	err := c.cc.Invoke(ctx, Buy_SetOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuyServer is the server API for Buy service.
// All implementations must embed UnimplementedBuyServer
// for forward compatibility
type BuyServer interface {
	SetProducts(context.Context, *BuyProductsRequest) (*BuyProductsResponse, error)
	SetOrder(context.Context, *SetOrderRequest) (*SetOrderResponse, error)
	mustEmbedUnimplementedBuyServer()
}

// UnimplementedBuyServer must be embedded to have forward compatible implementations.
type UnimplementedBuyServer struct {
}

func (UnimplementedBuyServer) SetProducts(context.Context, *BuyProductsRequest) (*BuyProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProducts not implemented")
}
func (UnimplementedBuyServer) SetOrder(context.Context, *SetOrderRequest) (*SetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrder not implemented")
}
func (UnimplementedBuyServer) mustEmbedUnimplementedBuyServer() {}

// UnsafeBuyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuyServer will
// result in compilation errors.
type UnsafeBuyServer interface {
	mustEmbedUnimplementedBuyServer()
}

func RegisterBuyServer(s grpc.ServiceRegistrar, srv BuyServer) {
	s.RegisterService(&Buy_ServiceDesc, srv)
}

func _Buy_SetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyServer).SetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Buy_SetProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyServer).SetProducts(ctx, req.(*BuyProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Buy_SetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyServer).SetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Buy_SetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyServer).SetOrder(ctx, req.(*SetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Buy_ServiceDesc is the grpc.ServiceDesc for Buy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Buy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "buy.Buy",
	HandlerType: (*BuyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetProducts",
			Handler:    _Buy_SetProducts_Handler,
		},
		{
			MethodName: "SetOrder",
			Handler:    _Buy_SetOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/buy.proto",
}
